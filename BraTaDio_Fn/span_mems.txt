('__class__', <class 'matplotlib.widgets.SpanSelector'>)
('__delattr__', <method-wrapper '__delattr__' of SpanSelector object at 0x000001F57A503280>)
('__dict__', {'ax': <Axes: >, 'canvas': <matplotlib.backends.backend_qtagg.FigureCanvasQTAgg object at 0x000001F576F5D120>, '_cids': [22, 23, 24, 25, 26, 27, 28, 22, 23, 24, 25, 26, 27, 28, 29], '_visible': True, 'onselect': <function onselect at 0x000001F545149480>, 'useblit': True, '_state_modifier_keys': {'move': ' ', 'clear': 'escape', 'square': 'not-applicable', 'center': 'not-applicable', 'rotate': 'not-applicable'}, '_use_data_coordinates': False, 'background': <matplotlib.backends._backend_agg.BufferRegion object at 0x000001F57A5D1470>, 'validButtons': None, '_selection_completed': True, '_eventpress': <matplotlib.backend_bases.MouseEvent object at 0x000001F57A5EE1D0>, '_eventrelease': <matplotlib.backend_bases.MouseEvent object at 0x000001F57A5EDE40>, '_prev_event': <matplotlib.backend_bases.MouseEvent object at 0x000001F57A5EDE40>, '_state': set(), '_direction': 'horizontal', '_extents_on_press': None, 'snap_values': None, '_pressv': None, '_props': {'alpha': 0.5, 'facecolor': 'blue', 'animated': True}, 'onmove_callback': None, 'minspan': 0, 'grab_range': 10, '_interactive': True, '_edge_handles': <matplotlib.widgets.ToolLineHandles object at 0x000001F57A53C160>, 'drag_from_anywhere': False, 'ignore_event_outside': False, '_selection_artist': <matplotlib.patches.Rectangle object at 0x000001F57A503E20>, '_handle_props': {'color': 'blue'}, '_edge_order': ['min', 'max'], '_active_handle': None, '_prev': (5.700201612903227, 290.5583333333334)})
('__dir__', <built-in method __dir__ of SpanSelector object at 0x000001F57A503280>)
('__doc__', '\n    Visually select a min/max range on a single axis and call a function with\n    those values.\n\n    To guarantee that the selector remains responsive, keep a reference to it.\n\n    In order to turn off the SpanSelector, set ``span_selector.active`` to\n    False.  To turn it back on, set it to True.\n\n    Press and release events triggered at the same coordinates outside the\n    selection will clear the selector, except when\n    ``ignore_event_outside=True``.\n\n    Parameters\n    ----------\n    ax : `matplotlib.axes.Axes`\n\n    onselect : callable\n        A callback function that is called after a release event and the\n        selection is created, changed or removed.\n        It must have the signature::\n\n            def on_select(min: float, max: float) -> Any\n\n    direction : {"horizontal", "vertical"}\n        The direction along which to draw the span selector.\n\n    minspan : float, default: 0\n        If selection is less than or equal to *minspan*, the selection is\n        removed (when already existing) or cancelled.\n\n    useblit : bool, default: False\n        If True, use the backend-dependent blitting features for faster\n        canvas updates. See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n\n    props : dict, optional\n        Dictionary of `matplotlib.patches.Patch` properties.\n        Default:\n\n            ``dict(facecolor=\'red\', alpha=0.5)``\n\n    onmove_callback : func(min, max), min/max are floats, default: None\n        Called on mouse move while the span is being selected.\n\n    span_stays : bool, default: False\n        If True, the span stays visible after the mouse is released.\n        Deprecated, use *interactive* instead.\n\n    interactive : bool, default: False\n        Whether to draw a set of handles that allow interaction with the\n        widget after it is drawn.\n\n    button : `.MouseButton` or list of `.MouseButton`, default: all buttons\n        The mouse buttons which activate the span selector.\n\n    handle_props : dict, default: None\n        Properties of the handle lines at the edges of the span. Only used\n        when *interactive* is True. See `matplotlib.lines.Line2D` for valid\n        properties.\n\n    grab_range : float, default: 10\n        Distance in pixels within which the interactive tool handles can be\n        activated.\n\n    state_modifier_keys : dict, optional\n        Keyboard modifiers which affect the widget\'s behavior.  Values\n        amend the defaults, which are:\n\n        - "clear": Clear the current shape, default: "escape".\n\n    drag_from_anywhere : bool, default: False\n        If `True`, the widget can be moved by clicking anywhere within\n        its bounds.\n\n    ignore_event_outside : bool, default: False\n        If `True`, the event triggered outside the span selector will be\n        ignored.\n\n    snap_values : 1D array-like, optional\n        Snap the selector edges to the given values.\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> import matplotlib.widgets as mwidgets\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot([1, 2, 3], [10, 50, 100])\n    >>> def onselect(vmin, vmax):\n    ...     print(vmin, vmax)\n    >>> span = mwidgets.SpanSelector(ax, onselect, \'horizontal\',\n    ...                              props=dict(facecolor=\'blue\', alpha=0.5))\n    >>> fig.show()\n\n    See also: :doc:`/gallery/widgets/span_selector`\n    ')
('__eq__', <method-wrapper '__eq__' of SpanSelector object at 0x000001F57A503280>)
('__format__', <built-in method __format__ of SpanSelector object at 0x000001F57A503280>)
('__ge__', <method-wrapper '__ge__' of SpanSelector object at 0x000001F57A503280>)
('__getattribute__', <method-wrapper '__getattribute__' of SpanSelector object at 0x000001F57A503280>)
('__gt__', <method-wrapper '__gt__' of SpanSelector object at 0x000001F57A503280>)
('__hash__', <method-wrapper '__hash__' of SpanSelector object at 0x000001F57A503280>)
('__init__', <bound method SpanSelector.__init__ of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('__init_subclass__', <built-in method __init_subclass__ of type object at 0x000001F575D848B0>)
('__le__', <method-wrapper '__le__' of SpanSelector object at 0x000001F57A503280>)
('__lt__', <method-wrapper '__lt__' of SpanSelector object at 0x000001F57A503280>)
('__module__', 'matplotlib.widgets')
('__ne__', <method-wrapper '__ne__' of SpanSelector object at 0x000001F57A503280>)
('__new__', <built-in method __new__ of type object at 0x00007FFA36EAB780>)
('__reduce__', <built-in method __reduce__ of SpanSelector object at 0x000001F57A503280>)
('__reduce_ex__', <built-in method __reduce_ex__ of SpanSelector object at 0x000001F57A503280>)
('__repr__', <method-wrapper '__repr__' of SpanSelector object at 0x000001F57A503280>)
('__setattr__', <method-wrapper '__setattr__' of SpanSelector object at 0x000001F57A503280>)
('__sizeof__', <built-in method __sizeof__ of SpanSelector object at 0x000001F57A503280>)
('__str__', <method-wrapper '__str__' of SpanSelector object at 0x000001F57A503280>)
('__subclasshook__', <built-in method __subclasshook__ of type object at 0x000001F575D848B0>)
('__weakref__', <weakref at 0x000001F576F1DD90; to 'SpanSelector' at 0x000001F57A503280>)
('_active', True)
('_active_handle', None)
('_changed_canvas', <bound method Widget._changed_canvas of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_cids', [22, 23, 24, 25, 26, 27, 28, 22, 23, 24, 25, 26, 27, 28, 29])
('_clean_event', <bound method _SelectorWidget._clean_event of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_clear_without_update', <bound method _SelectorWidget._clear_without_update of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_contains', <bound method SpanSelector._contains of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_direction', 'horizontal')
('_draw_shape', <bound method SpanSelector._draw_shape of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_edge_handles', <matplotlib.widgets.ToolLineHandles object at 0x000001F57A53C160>)
('_edge_order', ['min', 'max'])
('_eventpress', <matplotlib.backend_bases.MouseEvent object at 0x000001F57A5EE1D0>)
('_eventrelease', <matplotlib.backend_bases.MouseEvent object at 0x000001F57A5EDE40>)
('_extents_on_press', None)
('_get_animated_artists', <bound method _SelectorWidget._get_animated_artists of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_get_data', <bound method _SelectorWidget._get_data of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_handle_props', {'color': 'blue'})
('_handles_artists', (<matplotlib.lines.Line2D object at 0x000001F57A53C190>, <matplotlib.lines.Line2D object at 0x000001F57A53C5E0>))
('_hover', <bound method SpanSelector._hover of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_interactive', True)
('_on_key_press', <bound method _SelectorWidget._on_key_press of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_on_key_release', <bound method _SelectorWidget._on_key_release of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_on_scroll', <bound method _SelectorWidget._on_scroll of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_onmove', <bound method SpanSelector._onmove of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_press', <bound method SpanSelector._press of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_pressv', None)
('_prev', (5.700201612903227, 290.5583333333334))
('_prev_event', <matplotlib.backend_bases.MouseEvent object at 0x000001F57A5EDE40>)
('_props', {'alpha': 0.5, 'facecolor': 'blue', 'animated': True})
('_release', <bound method SpanSelector._release of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_selection_artist', <matplotlib.patches.Rectangle object at 0x000001F57A503E20>)
('_selection_completed', True)
('_set_active_handle', <bound method SpanSelector._set_active_handle of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_set_cursor', <bound method SpanSelector._set_cursor of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_setup_edge_handles', <bound method SpanSelector._setup_edge_handles of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_snap', <function SpanSelector._snap at 0x000001F57675C0D0>)
('_state', set())
('_state_modifier_keys', {'move': ' ', 'clear': 'escape', 'square': 'not-applicable', 'center': 'not-applicable', 'rotate': 'not-applicable'})
('_use_data_coordinates', False)
('_validate_state', <bound method _SelectorWidget._validate_state of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('_visible', True)
('active', True)
('add_state', <bound method _SelectorWidget.add_state of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('artists', (<matplotlib.patches.Rectangle object at 0x000001F57A503E20>, <matplotlib.lines.Line2D object at 0x000001F57A53C190>, <matplotlib.lines.Line2D object at 0x000001F57A53C5E0>))
('ax', <Axes: >)
('background', <matplotlib.backends._backend_agg.BufferRegion object at 0x000001F57A5D1470>)
('canvas', <matplotlib.backends.backend_qtagg.FigureCanvasQTAgg object at 0x000001F576F5D120>)
('clear', <bound method _SelectorWidget.clear of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('connect_default_events', <bound method SpanSelector.connect_default_events of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('connect_event', <bound method AxesWidget.connect_event of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('direction', 'horizontal')
('disconnect_events', <bound method AxesWidget.disconnect_events of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('drag_from_anywhere', False)
('drawon', True)
('eventson', True)
('extents', (5.700201612903227, 35.692943548387106))
('get_active', <bound method Widget.get_active of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('get_visible', <bound method _SelectorWidget.get_visible of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('grab_range', 10)
('ignore', <bound method _SelectorWidget.ignore of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('ignore_event_outside', False)
('minspan', 0)
('new_axes', <bound method SpanSelector.new_axes of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('on_key_press', <bound method _SelectorWidget.on_key_press of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('on_key_release', <bound method _SelectorWidget.on_key_release of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('on_scroll', <bound method _SelectorWidget.on_scroll of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('onmove', <bound method _SelectorWidget.onmove of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('onmove_callback', None)
('onselect', <function onselect at 0x000001F545149480>)
('press', <bound method _SelectorWidget.press of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('release', <bound method _SelectorWidget.release of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('remove_state', <bound method _SelectorWidget.remove_state of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('set_active', <bound method _SelectorWidget.set_active of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('set_handle_props', <bound method _SelectorWidget.set_handle_props of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('set_props', <bound method _SelectorWidget.set_props of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('set_visible', <bound method _SelectorWidget.set_visible of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('snap_values', None)
('state_modifier_keys', {'move': ' ', 'clear': 'escape', 'square': 'not-applicable', 'center': 'not-applicable', 'rotate': 'not-applicable'})
('update', <bound method _SelectorWidget.update of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('update_background', <bound method _SelectorWidget.update_background of <matplotlib.widgets.SpanSelector object at 0x000001F57A503280>>)
('useblit', True)
('validButtons', None)
('visible', True)
